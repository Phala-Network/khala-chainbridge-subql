type SpecVersion @entity {
    id: ID! #specVersion
    blockHeight: BigInt!
}

type Block @entity {
    # block hash
    id: ID!
    # parent block hash
    parent: ID!
    blockHeight: BigInt! @index
    timestamp: Date!
}

type Event @entity {
    id: ID!
    blockHeight: BigInt! @index
    event: String! @index
    module: String! @index
    timestamp: Date!
}

type Extrinsic @entity {
    id: ID!
    blockHeight: BigInt! @index
    call: String! @index
    isSigned: Boolean!
    module: String! @index
    success: Boolean!
    timestamp: Date!
}

# FungibleTransfer(ChainId, DepositNonce, ResourceId, U256, Vec<u8>)
type ChainBridgeFungibleTransferEvent @entity {
    id: ID!
    blockHeight: BigInt! @index
    timestamp: Date!

    amount: String!
    depositNonce: BigInt! @index
    destinationChainId: Int! @index
    executedAt: String!
    recipient: String!
    resourceId: String!
    signer: String
}

type ChainBridgeProposalApproval @entity {
    id: ID!
    timestamp: Date!

    depositNonce: BigInt! @index
    originChainId: Int! @index

    approvalBlockHeight: BigInt!
    approvalExtrinsic: String!
    signer: String!
}

type ChainBridgeProposalExecution @entity {
    id: ID!
    timestamp: Date!

    depositNonce: BigInt! @index
    originChainId: Int! @index

    signer: String!
}

type Treasury @entity {
    id: ID!

    blockHeight: BigInt! @index
    # total treasury income
    amount: BigInt!
}

type Mining @entity {
    id: ID!

    blockHeight: BigInt! @index
    # total distributed mining rewards
    amount: BigInt!
}

type Circulation @entity {
    id: ID!
    blockHeight: BigInt! @index
    # circulation on khala network
    khala: BigInt!
    # circulation on khala network and others
    total: BigInt!
}
